// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UPT.Data;

#nullable disable

namespace UPT.Data.Migrations
{
    [DbContext(typeof(UPTDbContext))]
    partial class UPTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UPT.Domain.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("message");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.Property<int>("TrainerId")
                        .HasColumnType("integer")
                        .HasColumnName("trainer_id");

                    b.HasKey("Id")
                        .HasName("pk_chats");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_chats_client_id");

                    b.HasIndex("TrainerId")
                        .HasDatabaseName("ix_chats_trainer_id");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("UPT.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("UPT.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("TrainerId")
                        .HasColumnType("integer")
                        .HasColumnName("trainer_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<double>("VolumeAbdomen")
                        .HasColumnType("double precision")
                        .HasColumnName("volume_abdomen");

                    b.Property<double>("VolumeBreast")
                        .HasColumnType("double precision")
                        .HasColumnName("volume_breast");

                    b.Property<double>("VolumeButtock")
                        .HasColumnType("double precision")
                        .HasColumnName("volume_buttock");

                    b.Property<double>("VolumeHip")
                        .HasColumnType("double precision")
                        .HasColumnName("volume_hip");

                    b.Property<double>("VolumeWaist")
                        .HasColumnType("double precision")
                        .HasColumnName("volume_waist");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("TrainerId")
                        .HasDatabaseName("ix_clients_trainer_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_clients_user_id");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("UPT.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.HasKey("Id")
                        .HasName("pk_favorits");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_favorits_client_id");

                    b.ToTable("favorits", (string)null);
                });

            modelBuilder.Entity("UPT.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("creator_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("text");

                    b.Property<int>("TrainerId")
                        .HasColumnType("integer")
                        .HasColumnName("trainer_id");

                    b.HasKey("Id")
                        .HasName("pk_feedbacks");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_feedbacks_creator_id");

                    b.HasIndex("TrainerId")
                        .HasDatabaseName("ix_feedbacks_trainer_id");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("UPT.Domain.Entities.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<double>("CurrentWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("current_weight");

                    b.Property<int[]>("DaysOfWeekForTraining")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("days_of_week_for_training");

                    b.Property<int>("DeadlineForResult")
                        .HasColumnType("integer")
                        .HasColumnName("deadline_for_result");

                    b.Property<double>("DesiredWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("desired_weight");

                    b.Property<bool>("HasInjuries")
                        .HasColumnType("boolean")
                        .HasColumnName("has_injuries");

                    b.Property<int>("TimeForTraining")
                        .HasColumnType("integer")
                        .HasColumnName("time_for_training");

                    b.Property<int?>("TrainerForGoalAchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("trainer_for_goal_achievement_id");

                    b.Property<int>("TrainingProgram")
                        .HasColumnType("integer")
                        .HasColumnName("training_program");

                    b.HasKey("Id")
                        .HasName("pk_goals");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_goals_client_id");

                    b.HasIndex("TrainerForGoalAchievementId")
                        .HasDatabaseName("ix_goals_trainer_for_goal_achievement_id");

                    b.ToTable("goals", (string)null);
                });

            modelBuilder.Entity("UPT.Domain.Entities.Gym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("close_time");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("open_time");

                    b.HasKey("Id")
                        .HasName("pk_gyms");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_gyms_city_id");

                    b.ToTable("gyms", (string)null);
                });

            modelBuilder.Entity("UPT.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edit_date");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_news");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_news_user_id");

                    b.ToTable("news", (string)null);
                });

            modelBuilder.Entity("UPT.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_checked");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notifications_user_id");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("UPT.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_payments_user_id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("UPT.Domain.Entities.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<int?>("DialogCount")
                        .HasColumnType("integer")
                        .HasColumnName("dialog_count");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<int?>("FavoriteId")
                        .HasColumnType("integer")
                        .HasColumnName("favorite_id");

                    b.Property<int>("GymId")
                        .HasColumnType("integer")
                        .HasColumnName("gym_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("MedicGrade")
                        .HasColumnType("boolean")
                        .HasColumnName("medic_grade");

                    b.Property<int[]>("TrainingPrograms")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("training_programs");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<bool>("WorkInjuries")
                        .HasColumnType("boolean")
                        .HasColumnName("work_injuries");

                    b.Property<bool>("WorkSportsmens")
                        .HasColumnType("boolean")
                        .HasColumnName("work_sportsmens");

                    b.HasKey("Id")
                        .HasName("pk_trainers");

                    b.HasIndex("FavoriteId")
                        .HasDatabaseName("ix_trainers_favorite_id");

                    b.HasIndex("GymId")
                        .HasDatabaseName("ix_trainers_gym_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_trainers_user_id");

                    b.ToTable("trainers", (string)null);
                });

            modelBuilder.Entity("UPT.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_confirmed");

                    b.Property<bool>("IsEmailNotificationEnable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_notification_enable");

                    b.Property<bool>("IsNotificationEnable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_notification_enable");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_users_city_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("UPT.Domain.Entities.Chat", b =>
                {
                    b.HasOne("UPT.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chats_clients_client_id");

                    b.HasOne("UPT.Domain.Entities.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chats_trainers_trainer_id");

                    b.Navigation("Client");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("UPT.Domain.Entities.Client", b =>
                {
                    b.HasOne("UPT.Domain.Entities.Trainer", "Trainer")
                        .WithMany("Clients")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_trainers_trainer_id");

                    b.HasOne("UPT.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_users_user_id");

                    b.Navigation("Trainer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UPT.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("UPT.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_favorits_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("UPT.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("UPT.Domain.Entities.Client", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_clients_creator_id");

                    b.HasOne("UPT.Domain.Entities.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_trainers_trainer_id");

                    b.Navigation("Creator");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("UPT.Domain.Entities.Goal", b =>
                {
                    b.HasOne("UPT.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goals_clients_client_id");

                    b.HasOne("UPT.Domain.Entities.Trainer", "TrainerForGoalAchievement")
                        .WithMany()
                        .HasForeignKey("TrainerForGoalAchievementId")
                        .HasConstraintName("fk_goals_trainers_trainer_for_goal_achievement_id");

                    b.Navigation("Client");

                    b.Navigation("TrainerForGoalAchievement");
                });

            modelBuilder.Entity("UPT.Domain.Entities.Gym", b =>
                {
                    b.HasOne("UPT.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gyms_cities_city_id");

                    b.Navigation("City");
                });

            modelBuilder.Entity("UPT.Domain.Entities.News", b =>
                {
                    b.HasOne("UPT.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UPT.Domain.Entities.Notification", b =>
                {
                    b.HasOne("UPT.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UPT.Domain.Entities.Payment", b =>
                {
                    b.HasOne("UPT.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UPT.Domain.Entities.Trainer", b =>
                {
                    b.HasOne("UPT.Domain.Entities.Favorite", null)
                        .WithMany("Trainers")
                        .HasForeignKey("FavoriteId")
                        .HasConstraintName("fk_trainers_favorits_favorite_id");

                    b.HasOne("UPT.Domain.Entities.Gym", "Gym")
                        .WithMany("Trainers")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trainers_gyms_gym_id");

                    b.HasOne("UPT.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trainers_users_user_id");

                    b.Navigation("Gym");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UPT.Domain.Entities.User", b =>
                {
                    b.HasOne("UPT.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_users_cities_city_id");

                    b.Navigation("City");
                });

            modelBuilder.Entity("UPT.Domain.Entities.Favorite", b =>
                {
                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("UPT.Domain.Entities.Gym", b =>
                {
                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("UPT.Domain.Entities.Trainer", b =>
                {
                    b.Navigation("Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
